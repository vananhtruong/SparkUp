@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Reset Password";
}

<div class="auth-container">
    <div class="auth-box">
        <div class="form-container">
            <!-- Reset Password Form -->
            <div class="form-section" id="resetPasswordForm">
                <h2>Reset Password</h2>
                <p class="text-muted mb-4">Please enter your new password below.</p>
                <form id="resetPasswordForm" method="post" asp-action="ResetPassword" onsubmit="return validateForm()">
                    <input type="hidden" id="userId" name="UserId" value="@ViewData["UserId"]" />
                    <div class="form-group mb-3">
                        <label for="newPassword">New Password</label>
                        <input type="password" name="password" class="form-control" id="newPassword" required>
                        <div class="password-strength mt-1" id="passwordStrength"></div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="confirmPassword">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" required>
                        <div class="password-match mt-1" id="passwordMatch"></div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Reset Password</button>
                </form>
                <p class="mt-3 text-center">
                    Remember your password? 
                    <a href="#" onclick="switchToLogin()" class="text-primary">Login here</a>
                </p>
            </div>
        </div>
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
    }

    .auth-box {
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        overflow: hidden;
    }

    .form-container {
        position: relative;
        width: 200%;
        display: flex;
        transition: transform 0.5s ease-in-out;
    }

    .form-section {
        width: 50%;
        padding: 2rem;
    }

    .form-group label {
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .btn-primary {
        padding: 0.75rem;
        font-weight: 500;
    }

    .text-muted {
        font-size: 0.9rem;
    }

    .password-strength, .password-match {
        font-size: 0.85rem;
        margin-top: 0.25rem;
    }

    .password-match.error {
        color: #dc3545;
    }

    .password-match.success {
        color: #198754;
    }

    .form-container.slide-left {
        transform: translateX(-50%);
    }
</style>

@section Scripts {
    <script>
        function switchToLogin() {
            const container = document.querySelector('.form-container');
            container.classList.add('slide-left');
            setTimeout(() => {
                window.location.href = '@Url.Action("Index", "Authentication")';
            }, 500); // Wait for animation to complete
        }

        // Password validation
        const newPassword = document.getElementById('newPassword');
        const confirmPassword = document.getElementById('confirmPassword');
        const passwordMatch = document.getElementById('passwordMatch');
        const passwordStrength = document.getElementById('passwordStrength');

        function checkPasswordStrength(password) {
            let strength = 0;
            if (password.length >= 8) strength++;
            if (password.match(/[a-z]+/)) strength++;
            if (password.match(/[A-Z]+/)) strength++;
            if (password.match(/[0-9]+/)) strength++;
            if (password.match(/[^a-zA-Z0-9]+/)) strength++;

            switch(strength) {
                case 0:
                case 1:
                    return { text: 'Very Weak', color: '#dc3545' };
                case 2:
                    return { text: 'Weak', color: '#ffc107' };
                case 3:
                    return { text: 'Medium', color: '#fd7e14' };
                case 4:
                    return { text: 'Strong', color: '#20c997' };
                case 5:
                    return { text: 'Very Strong', color: '#198754' };
            }
        }

        function checkPasswordMatch() {
            if (confirmPassword.value === '') {
                passwordMatch.textContent = '';
                passwordMatch.className = 'password-match';
                return false;
            }
            
            if (newPassword.value === confirmPassword.value) {
                passwordMatch.textContent = 'Passwords match';
                passwordMatch.className = 'password-match success';
                return true;
            } else {
                passwordMatch.textContent = 'Passwords do not match';
                passwordMatch.className = 'password-match error';
                return false;
            }
        }

        newPassword.addEventListener('input', function() {
            const strength = checkPasswordStrength(this.value);
            passwordStrength.textContent = `Password Strength: ${strength.text}`;
            passwordStrength.style.color = strength.color;
            checkPasswordMatch();
        });

        confirmPassword.addEventListener('input', checkPasswordMatch);

        function validateForm() {
            if (!checkPasswordMatch()) {
                alert('Passwords do not match!');
                return false;
            }

            const strength = checkPasswordStrength(newPassword.value);
            if (strength.text === 'Very Weak' || strength.text === 'Weak') {
                if (!confirm('Your password is weak. Are you sure you want to continue?')) {
                    return false;
                }
            }

            return true;
        }
    </script>
}
